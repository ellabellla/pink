true = "true";
false = "false";

and = "and";
or = "or";
xor = "xor";

peek = "@@";
pop = "@";

if = "?";
into = "<-";
exec = "->";
reduce_exec = "*>";
into_exec = "<*";

add_set = "+:";
sub_set = "-:";
mul_set = "*:";
div_set = "/:";
set = ":";
setters = set | add_set | sub_set | mul_set | div_set;


not = "!";
add = "+";
sub = "-";
mul = "*";
div = "/";

less_equ = "<=";
great_equ = ">=";
less = "<";
great = ">";
equ = "=";

alpha = [A-Za-z];
digit = [0-9];

number = digit+ ('.' digit*)? | '.' digit+;
identifier = (alpha | '_') (alpha | digit | '_')*;

reference = identifier | pop | peek;
value = number | not number | true | false | indexed_value | reference | exec | reduce | for_each | into | tuple | meta;
operator_1st = mul | div;
operator_2nd = add | sub;
operator_3rd = less_equ | great_equ | less | great | equ;
operator_4th = and | or | xor;

expression = expression_3rd (operator_4th expression_3rd)*;
expression_3rd = expression_2nd (operator_3rd expression_2nd)*;
expression_2nd = expression_3rd (operator_2nd expression_3rd)*;
expression_3rd = expression_value (operator_1st expression_value)*;
expression_value = value;

definition = identifier setters expression;

expression_list = '[' ((expression | definition) ((',' | ';') (expression | definition))* (',' | ';')?)? ']';

exec = expression_list | (tuple exec expression);
into = (meta | tuple | indexed_value | reference) into exec;
for_each = (meta | tuple | indexed_value | reference) into_exec exec;
reduce = (meta | tuple | indexed_value | reference) reduce_exec exec;

tuple = '(' ((definition | expression) (';' (definition | expression))*)? ')';

indexed_value = reference meta;
meta = '{' number (';' number)? '}'

statement = (definition | expression) (',' | ';');

grammar = statement* EOF;