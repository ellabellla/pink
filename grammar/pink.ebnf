true = "true";
false = "false";

and = "and";
or = "or";
xor = "xor";

peek = "@@";
pop = "@";
matrix = "#";
call = "|";
return = "!";

if = "?";
into = "<-";
exec = "->";
reduce = "*>";
for_each = "<*";

add_set = "+:";
sub_set = "-:";
mul_set = "*:";
div_set = "/:";
set = ":";
setters = set | add_set | sub_set | mul_set | div_set;

not = "!";
add = "+";
sub = "-";
mul = "*";
div = "/";

less_equ = "<=";
great_equ = ">=";
less = "<";
great = ">";
equ = "=";

alpha = [A-Za-z];
digit = [0-9];

string = '"' .*? '"';
number = digit+ ('.' digit*)? | '.' digit+;
identifier = (alpha | '_') (alpha | digit | '_')*;

reference = identifier | pop | peek | ident call string? expression (';' expression) call;
value = number | not number | true | false | tuple_constructor | tuple | indexed_value | reference | exec | reduce | for_each | into;
operator_1st = mul | div;
operator_2nd = add | sub;
operator_3rd = less_equ | great_equ | less | great | equ;
operator_4th = and | or | xor;
operator_5th = if;

expression = (expression_4th (operator_5th tuple)*) return?;
expression_4th = expression_3rd (operator_4th expression_3rd)*;
expression_3rd = expression_2nd (operator_3rd expression_2nd)*;
expression_2nd = expression_1st (operator_2nd expression_1st)*;
expression_1st = expression_value (operator_1st expression_value)*;
expression_value = value;

definition = identifier setters (tuple_constructor | expression | value_tuple);
strict_definition = identifier set (tuple_constructor | expression | value_tuple);

expression_list = '[' ((definition | expression) ((',' | ';') (definition | expression))* (',' | ';')?)? ']';

exec = expression_list | (tuple exec (expression_list | identifier));
into = (tuple_constructor | matrix| value_tuple | reference) into exec;
for_each = (matrix| value_tuple | reference | range) into_exec exec;
reduce = (matrix| value_tuple | reference | range) reduce_exec exec;

tuple = '(' ((strict_definition | expression) (';' (strict_definition | expression))*)? ')';
value_tuple = '(' (expression (';' expression)*)? ')';

indexed_value = (matrix | reference) index;
index = '(' expression (',' expression)? ')';
range = '{' expression ';' expression (';' expression)? '}';
tuple_constructor = '(' '{' expression '}' ')';

statement = (definition | expression) (',' | ';');

grammar = statement* EOF;